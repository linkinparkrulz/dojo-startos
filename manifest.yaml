id: dojo
title: 'Dojo'
version: 1.28.0.0
release-notes: Version v1.28.0
license: AGPLv3
wrapper-repo: 'https://github.com/ericpp/dojo-startos'
upstream-repo: 'https://github.com/Dojo-Open-Source-Project/samourai-dojo'
support-site: 'https://github.com/Dojo-Open-Source-Project/samourai-dojo'
marketing-site: 'https://github.com/Dojo-Open-Source-Project/samourai-dojo'
build: ['make']
description:
  short: Your private backend server for Ashigaru, Samourai Wallet and other light wallets.
  long:
    Dojo is the backend server for Ashigaru, Samourai Wallet and other light wallets. It provides HD account & loose addresses (BIP47) balances & transactions lists.
    Provides unspent output lists to the wallet. PushTX endpoint broadcasts transactions through the backing bitcoind node.
assets:
  license: LICENSE.md
  icon: icon.png
  instructions: instructions.md
main:
  type: docker
  image: main
  entrypoint: 'docker_entrypoint.sh'
  args: []
  mounts:
    main: /root
    db: /var/lib/mysql
hardware-requirements:
  arch:
    - x86_64
    - aarch64
health-checks:
  api:
    name: API
    success-message: Dojo API is online and ready for connections
    type: docker
    image: main
    entrypoint: 'check-api.sh'
    args: []
    inject: true
    system: false
    io-format: yaml
  mysql:
    name: MySQL
    success-message: MySQL is online and ready for connections
    type: docker
    image: main
    entrypoint: 'check-mysql.sh'
    args: []
    inject: true
    system: false
    io-format: yaml
  pushtx:
    name: PushTx
    success-message: Dojo PushTx API is online and ready for connections
    type: docker
    image: main
    entrypoint: 'check-pushtx.sh'
    args: []
    inject: true
    system: false
    io-format: yaml
  synced:
    name: Synced
    success-message: Dojo is synced with the network
    type: docker
    image: main
    entrypoint: 'check-synced.sh'
    args: []
    inject: true
    system: false
    io-format: yaml
  soroban:
    name: Soroban
    success-message: Soroban P2P relay service is online and ready
    type: docker
    image: main
    entrypoint: 'check-soroban.sh'
    args: []
    inject: true
    system: false
    io-format: yaml
config:
  get:
    type: script
  set:
    type: script
properties:
  type: script
volumes:
  main:
    type: data
  db:
    type: data
interfaces:
  main:
    name: Dojo Web UI
    description: Specifies the interface to listen on for HTTP connections.
    tor-config:
      port-mapping:
        80: '9000'
    ui: true
    protocols:
      - tcp
      - http
  soroban:
    name: Soroban Interface
    description: Web interface for Soroban
    tor-config:
      port-mapping:
        80: '4242'
    ui: true
    protocols:
      - tcp
      - http
dependencies:
  bitcoind:
    version: '>=0.21.1.2 <31.0.0'
    requirement:
      type: 'opt-out'
      how: Use the Bitcoin Core (default)
    description: Used to subscribe to new block events from a full archival node
    config:
      check:
        type: script
      auto-configure:
        type: script
    requires-runtime-config: true
  bitcoind-testnet:
    version: '>=0.21.1.2 <31.0.0'
    requirement:
      type: 'opt-in'
      how: Use the Bitcoin Core Testnet4
    description: Used to subscribe to new block events from a full archival node (testnet)
    config:
      check:
        type: script
      auto-configure:
        type: script
    requires-runtime-config: true
  fulcrum:
    version: '>=1.11.0'
    requirement:
      type: 'opt-in'
      how: Set Indexer to Fulcrum in the config
    description: Used for fast scan of addresses and indexing for deep wallets.
  electrs:
    version: '>=0.10.7'
    requirement:
      type: 'opt-in'
      how: Set Indexer to Electrs in the config
    description: A more stable, but less performant indexer.
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: /mnt/backup
      main: /root/data
      db: /var/lib/mysql
    io-format: yaml
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: /mnt/backup
      main: /root/data
      db: /var/lib/mysql
    io-format: yaml
migrations:
  from:
    '*':
      type: script
      args: ['from']
  to:
    '*':
      type: script
      args: ['to']
